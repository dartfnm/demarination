#include "../support/gcc8_c_support.h"
#include <proto/exec.h>
#include <proto/dos.h>
#include <proto/graphics.h>
#include <graphics/gfxbase.h>
#include <graphics/view.h>
#include <exec/execbase.h>
#include <graphics/gfxmacros.h>
#include <hardware/custom.h>
#include <hardware/dmabits.h>
#include <hardware/intbits.h>

// includes
#include "../main.h"
#include "../copper.h"
#include "../resources.h"
#include "../tables.h"
#include "../palerp.h"
#include "../drawtext.h"
#include "backdrop.h"

#define X_RES               320
#define X_RES_WORD          (X_RES/16)
#define X_RES_BYTE          (X_RES/8)

#define X_PITCH             320
#define X_PITCH_WORD        (X_PITCH/16)
#define X_PITCH_BYTE        (X_PITCH/8)

#define BPL_COUNT           2
#define X_PITCH_BPL         (X_PITCH*BPL_COUNT)
#define X_PITCH_BPL_WORD    (X_PITCH_BPL/16)
#define X_PITCH_BPL_BYTE    (X_PITCH_BPL/8)

#define BACKDROP_WIDTH      32
#define BACKDROP_WIDTH_BYTE (BACKDROP_WIDTH/8)
#define BACKDROP_WIDTH_WORD (BACKDROP_WIDTH/16)
#define BACKDROP_HEIGHT     32


#define Y_RES               256
#define Y_PITCH             (Y_RES+BACKDROP_HEIGHT)
#define BPL_SIZE            (X_PITCH_BYTE*Y_PITCH)
#define BPLSCREEN_SIZE      (BPL_SIZE*BPL_COUNT)

// -------------------------
// resources

INCBIN_CHIP(backdrop_test, "gfx/backdrop_test.bpl")

// copperlist
static USHORT* copper_main;
static USHORT* copper_bdscroll;

// bitplane pool
static USHORT* bplbase;

int backdrop_init() {
    // allocate copperlist memory
    copper_main = (USHORT*)AllocMem(256,  MEMF_CHIP);

    // init bpl pointers
    bplbase = bpl_pool;

    // fill copperlist
    USHORT *copPtr = copper_main;

    // init data fetch/display window
    copPtr = setLowres320Wide(copPtr, Y_RES);
    // enable bitplanes    
    *copPtr++ = offsetof(struct Custom, bplcon0);
    *copPtr++ = (1<<10)/*dual pf*/|(1<<9)/*color*/|((BPL_COUNT+1)<<12)/*num bitplanes*/;
    *copPtr++ = offsetof(struct Custom, bplcon1);    //scrolling
    *copPtr++ = 0;
    *copPtr++ = offsetof(struct Custom, bplcon2);    //playfied priority
    *copPtr++ = 0<<6;

    //set bitplane modulo
	*copPtr++=offsetof(struct Custom, bpl1mod); //odd planes   1,3,5
	*copPtr++=(USHORT)(BPL_COUNT*X_PITCH_BYTE - X_RES_BYTE);
	*copPtr++=offsetof(struct Custom, bpl2mod); //even  planes 2,4
	*copPtr++=(USHORT)(-X_RES_BYTE);

    // set bitplane pointers
    COPPERLIST_ADD_MOVE_LONG(copPtr, bplpt[1], temp_2ndpf);

    copper_bdscroll = copPtr;
    COPPERLIST_ADD_MOVE_LONG(copPtr, bplpt[0], bplbase);
    COPPERLIST_ADD_MOVE_LONG(copPtr, bplpt[2], bplbase + X_PITCH_BYTE);

    // set colors
    COPPERLIST_ADD_MOVE(copPtr, color[0], 0x000);
    COPPERLIST_ADD_MOVE(copPtr, color[1], 0x111);
    COPPERLIST_ADD_MOVE(copPtr, color[2], 0x222);
    COPPERLIST_ADD_MOVE(copPtr, color[3], 0x333);

    // terminate copperlist
    *copPtr++ = 0xffff;
    *copPtr++ = 0xfffe;

    return 0;
}

// free memory
int backdrop_free() {
    FreeMem(copper_main, 256);
    return 0;
}

// the main show!
int backdrop_run() {
    // remove stray VBL handlers
    part_vbl = NULL;
    part_cop = NULL;
    part_blt = NULL;

    // disable screen
    WaitVbl();

    // enable blitter dma if is not enabled already
    custom->dmacon  = DMAF_SETCLR | DMAF_MASTER | DMAF_BLITTER;

    // copy backdrop graphics
    // blit logo to buffer
    for (int x = 0; x < X_RES_BYTE; x += BACKDROP_WIDTH_BYTE) {
        WaitBlit();
        custom->bltcon0 = A_TO_D | SRCA | DEST;
        custom->bltcon1 = 0;
        custom->bltapt  = backdrop_test;
        custom->bltdpt  = (UBYTE*)bplbase + x;
        custom->bltamod = 0;
        custom->bltdmod = X_PITCH_BYTE - BACKDROP_WIDTH_BYTE;
        custom->bltafwm = custom->bltalwm = 0xffff;
        custom->bltsize = ((BACKDROP_HEIGHT * BPL_COUNT) << HSIZEBITS) | (BACKDROP_WIDTH_WORD);
    }

#if 0
    // feedback blit horizontally
    WaitBlit();
    custom->bltcon0 = A_TO_D | SRCA | DEST;
    custom->bltcon1 = 0;
    custom->bltapt  = (UBYTE*)bplbase;
    custom->bltdpt  = (UBYTE*)bplbase + BACKDROP_WIDTH_BYTE;
    custom->bltamod = 0;
    custom->bltdmod = BACKDROP_WIDTH_BYTE;
    custom->bltsize = ((BACKDROP_HEIGHT * BPL_COUNT) << HSIZEBITS) | (X_RES_WORD - BACKDROP_WIDTH_WORD);
#endif

    // feedback blit vertically
    WaitBlit();
    custom->bltcon0 = A_TO_D | SRCA | DEST;
    custom->bltcon1 = 0;
    custom->bltapt  = (UBYTE*)bplbase;
    custom->bltdpt  = (UBYTE*)bplbase + X_PITCH_BPL_BYTE*BACKDROP_HEIGHT;
    custom->bltamod = 0;
    custom->bltdmod = 0;
    custom->bltsize = ((Y_RES * BPL_COUNT) << HSIZEBITS) | (X_RES_WORD);

    // start copper
    custom->dmacon = DMAF_COPPER;   // stop copper
    custom->cop1lc = (ULONG)copper_main;
    custom->dmacon = DMAF_BLITTER | DMAF_RASTER; //disable blitter dma for copjmp bug
    //custom->copjmp1 = 0x7fff; //start coppper
    custom->dmacon = DMAF_SETCLR | DMAF_MASTER | DMAF_RASTER | DMAF_COPPER | DMAF_BLITTER;

    int backdrop_scroll_y = 0;
    while ((isRunning)) {
        // vbl
        volatile short fc = frameCounter;
        while (fc == frameCounter);
        
        WaitLineOrAbove(0x10);
        UBYTE* bplpos = (UBYTE*)bplbase + (backdrop_scroll_y*X_PITCH_BPL_BYTE);
        COPPERLIST_SET_MOVE_LONG(copper_bdscroll+0, bplpt[0], bplpos);
        COPPERLIST_SET_MOVE_LONG(copper_bdscroll+4, bplpt[2], bplpos + X_PITCH_BYTE);

        backdrop_scroll_y = (backdrop_scroll_y + 1) & (BACKDROP_HEIGHT-1);
    }

    // cleanup
    part_vbl = NULL;
    part_cop = NULL;
    part_blt = NULL;

    return isRunning;
}
